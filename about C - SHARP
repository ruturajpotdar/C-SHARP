// C# 
// is pronounced "C-Sharp".

/* It is an object-oriented programming language created by Microsoft that runs on the .NET Framework.
C# has roots from the C family, and the language is close to other popular languages like C++ and Java */

/* C# is used for Desktop applications ,Web applications, Web services, Web sites, Games etc. C# is an object oriented language which gives a clear structure to programs and allows code to be reused, lowering development costs
As C# is close to C, C++ and Java, it makes it easy for programmers to switch to C# or vice versa */

// C# - SYNTAX
/* at top we use "using System" means that we can use classes from the System namespace.
namespace is used to organize your code, and it is a container for classes and other namespaces.
class is a container for data and methods, which brings functionality to your program.
Every line of code that runs in C# must be inside a class. */
// The curly braces {} marks the beginning and the end of a block of code.
/* Another thing that always appear in a C# program, is the Main method. Any code inside its curly brackets {} will be executed.
Console is a class of the System namespace, which has a WriteLine() method that is used to output/print text. as previous code gave us output "Hello World!" using WriteLine() method. 
If you omit the using System line, you would have to write System.Console.WriteLine() to print/output text. */
// Every C# statement ends with a semicolon ; ps - make sure you use semicolon wisely :)
//C# is case-sensitive: "MyClass" and "myclass" has different meaning. 
C# Comments
/* Comments can be used to explain C# code, and to make it more readable. It can also be used to prevent execution when testing alternative code.
//Single-line Comments
Single-line comments start with two forward slashes (//).
Any text between // and the end of the line is ignored by C# (will not be executed). */
// C# Multi-line Comments
/*Multi-line comments start with /* and ends with */.
Any text between /* and */ will be ignored by C#. */

//Variables
/* C# Variables
Variables are containers for storing data values.
In C#, there are different types of variables (defined with different keywords), for example:*/

//int - stores integers (whole numbers), without decimals, such as 123 or -123
//double - stores floating point numbers, with decimals, such as 19.99 or -19.99
//char - stores single characters, such as 'a' or 'B'. Char values are surrounded by single quotes
//string - stores text, such as "Hello World". String values are surrounded by double quotes
//bool - stores values with two states: true or false

//Syntax for variables
//type variableName = value;
//Where type is a C# type (such as int or string), and variableName is the name of the variable (such as x or name). The equal sign is used to assign values to the variable.
//Constants
/*If you don't want others (or yourself) to overwrite existing values, you can add the "const" keyword in front of the variable type.
This will declare the variable as "constant", which means unchangeable and read-only.*/
example of constant :
const int myNum = 15;
myNum = 20; // error
if you try to change const it will give error.
//The WriteLine() method is often used to display variable values to the console window.
//To combine both text and a variable, use the + character:
//for example 
//string name = "soham";
//Console.WriteLine("Hello " + name);
//we can also use the + character to add a variable to another variable i.e string fullname = soham + lastName;
//For numeric values, the + character works as a mathematical operator (notice that we use int (integer) variables here):
int x = 5, y = 6;
Console.WriteLine(x + y); // Printing the value of x + y


